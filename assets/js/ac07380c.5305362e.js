"use strict";(self.webpackChunkphpvms_docs=self.webpackChunkphpvms_docs||[]).push([[3962],{683:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"installation/docker","title":"Installing with Docker","description":"phpVMS includes a docker-compose.dev.yml which is used by Laravel Sail. This works great for local development. For production, a sample docker-compose.yml is included, with a few points below:","source":"@site/docs/installation/docker.md","sourceDirName":"installation","slug":"/installation/docker","permalink":"/installation/docker","draft":false,"unlisted":false,"editUrl":"https://github.com/phpvms/docs/tree/master/docs/installation/docker.md","tags":[],"version":"current","frontMatter":{"id":"docker","title":"Installing with Docker"},"sidebar":"docs","previous":{"title":"Updating","permalink":"/installation/updating"},"next":{"title":"Installation Issues","permalink":"/installation/issues"}}');var a=s(4848),r=s(8453);const o={id:"docker",title:"Installing with Docker"},i=void 0,l={},c=[];function d(n){const e={code:"code",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:["phpVMS includes a ",(0,a.jsx)(e.code,{children:"docker-compose.dev.yml"})," which is used by Laravel Sail. This works great for local development. For production, a sample ",(0,a.jsx)(e.code,{children:"docker-compose.yml"})," is included, with a few points below:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yml",children:'app:\n    container_name: phpvms-app\n    user: "${WWWUSER:-1000}:${WWWGROUP:-1000}"\n    image: phpvms:app\n    build:\n      context: .\n      args:\n        WWWUSER: ${WWWUSER:-1000}\n        WWWGROUP: ${WWWGROUP:-1000}\n    restart: unless-stopped\n    environment:\n      PHP_OPCACHE_ENABLE: 1\n      # some basic laravel stuff\n      AUTORUN_ENABLED: true\n    env_file: .env\n    volumes:\n      - ./modules:/var/www/html/modules:ro\n      - ./public/uploads:/var/www/html/public/uploads:rw\n      - ./storage:/var/www/html/storage:rw\n    depends_on:\n      - caddy\n      - mariadb\n      - redis\n    networks:\n      - phpvms\n\n  task:\n    container_name: phpvms-task\n    user: "${WWWUSER:-1000}:${WWWGROUP:-1000}"\n    image: phpvms:app\n    restart: unless-stopped\n    command: ["php", "/var/www/html/artisan", "schedule:work"]\n    environment:\n      PHP_OPCACHE_ENABLE: 1\n    healthcheck:\n      # This is our native healthcheck script for the scheduler\n      test: [ "CMD", "healthcheck-schedule" ]\n      start_period: 10s\n    env_file: .env\n    volumes:\n      - ./modules:/var/www/html/modules:ro\n      - ./public/uploads:/var/www/html/public/uploads:rw\n      - ./storage:/var/www/html/storage:rw\n    networks:\n      - phpvms\n\n  queue:\n    container_name: phpvms-queue\n    user: "${WWWUSER:-1000}:${WWWGROUP:-1000}"\n    image: phpvms:app\n    restart: unless-stopped\n    command: [ "php", "/var/www/html/artisan", "queue:work", "--tries=3" ]\n    environment:\n      PHP_OPCACHE_ENABLE: 1\n    healthcheck:\n      # This is our native healthcheck script for the queue\n      test: [ "CMD", "healthcheck-queue" ]\n      start_period: 10s\n    env_file: .env\n    volumes:\n      - ./modules:/var/www/html/modules:ro\n      - ./public/uploads:/var/www/html/public/uploads:rw\n      - ./storage:/var/www/html/storage:rw\n    networks:\n      - phpvms\n\n  caddy:\n    container_name: phpvms-caddy\n    image: caddy:2\n    restart: unless-stopped\n    env_file: .env\n    ports:\n      - "${FORWARD_HTTP_PORT:-80}:80"\n      - "${FORWARD_HTTPS_PORT:-443}:443"\n    volumes:\n      - ./public/:/var/www/html/public\n      - ./resources/docker/Caddyfile:/etc/caddy/Caddyfile\n      - caddy_config:/config\n      - caddy_data:/data\n    networks:\n      - phpvms\n\n  mariadb:\n    container_name: phpvms-mariadb\n    image: mariadb:11\n    restart: unless-stopped\n    # If someone need to access db from the outside\n    ports:\n      - \'${FORWARD_DB_PORT:-3306}:3306\'\n    environment:\n      MYSQL_ROOT_PASSWORD: \'${DB_PASSWORD}\'\n      MYSQL_DATABASE: \'${DB_DATABASE}\'\n      MYSQL_USER: \'${DB_USERNAME}\'\n      MYSQL_PASSWORD: \'${DB_PASSWORD}\'\n      MYSQL_ALLOW_EMPTY_PASSWORD: \'no\'\n    volumes:\n      - mariadb:/var/lib/mysql\n    networks:\n      - phpvms\n    healthcheck:\n      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]\n      start_period: 10s\n      interval: 10s\n      timeout: 5s\n      retries: 3\n\n  redis:\n    container_name: phpvms-redis\n    image: redis:alpine\n    restart: unless-stopped\n    volumes:\n      - redis:/data\n    networks:\n      - phpvms\n    healthcheck:\n      test: [ "CMD", "redis-cli", "ping" ]\n      retries: 3\n      timeout: 5s\n\nvolumes:\n  caddy_data:\n  caddy_config:\n  mariadb:\n  redis:\n\nnetworks:\n  phpvms:\n    driver: bridge\n'})})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>i});var t=s(6540);const a={},r=t.createContext(a);function o(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);